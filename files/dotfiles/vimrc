set nocompatible

set scrolloff=5     " show 5 lines above cursor
set wrap            " wrap long lines around instead of spilling off the screen
set linebreak       " dont break words across a wrap, just put the whole word on the next line

" Paths
set path+=**	" add current directory to vim path
set wildignore+=**/__pycache__/**
set wildignore+=**/node_modules/**

" Tab Behavior
set tabstop=4		" show existing tab with 4 spaces width
set shiftwidth=4	" when indenting with '>', use 4 spaces width
set expandtab		" On pressing tab, insert 4 spaces
set smarttab        " <BS> deletes <Tab> in insert mode

" Motion behaviour
set iskeyword+=^(   " Stop on (
set iskeyword+=^)   " Stop on )

" File Finding
" Tweaks for browsing
let g:netrw_banner=0        " disable annoying banner
let g:netrw_browse_split=4  " open in prior window
let g:netrw_altv=1          " open splits to the right
let g:netrw_liststyle=3     " tree view
let g:netrw_list_hide=netrw_gitignore#Hide()
let g:netrw_list_hide.=',\(^\|\s\s\)\zs\.\S\+'

" Buffer Management
set autoread                                    " automatically read buffers that have changed outside Vim
set hidden                                      " hide buffers instead of unloading
" Reread buffer when entering
autocmd FocusGained,BufEnter * :silent! !
" Auto save buffer when leaving it
autocmd FocusLost,WinLeave * :silent! noautocmd w

" Syntax Highlighting
syntax enable
filetype indent on	" Load file type specific indenting rules
filetype plugin indent on

" Autocompletion menu
set complete+=kspell
set completeopt=menuone,longest
set omnifunc=syntaxcomplete#Complete    " Use i_<C-X><C-O> to see autocomplete options
inoremap <expr> <TAB>  pumvisible() ? "<C-n>" : "<TAB>"
inoremap <expr> <S-TAB>  pumvisible() ? "<C-p>" : "<TAB>"

" Line Numbers
set cursorline		" Highlight the row the cursor is one
set number		    " show absolute line number under cursor
" set relativenumber	" show line numbers relative to cursor

" Miscellaneous
set mouse=a				        " Enable the mouse
set wildmenu			        " In GUI mode, tab will suggest commands for you
set showmatch 			        " Show corresponding end braces
set backspace=indent,eol,start  " Modern backspacing behaviour

" Search
set ignorecase smartcase		" Ignore case when searching unless using a capital letter
set hlsearch		" Highlight search matches
set incsearch		" Search as characters are entered
set ruler
" '//' in Visual mode will search for visually selected text
vnoremap // y/\V<C-R>=escape(@",'/\')<CR><CR>'")

" Spelling
" z= gives suggestions on misspelling
" zg marks bad as good
" zw marks good and bad
set spelllang=en_us	" Set spell checking dictionary to English
" set spell			" Turn on spell checking
set nospell			" Turn off spell checking

" Folding
set foldmethod=indent
set foldlevel=99

" Window fun
" Augment window management prefix to close preview window
noremap <C-W><C-P> :pclose<CR>

" Set up python interpreters for neovim
if filereadable($HOME . "/.pyenv/versions/neovim3/bin/python")
    " if using pyenv/virtualenv:
    " follow https://github.com/deoplete-plugins/deoplete-jedi/wiki/Setting-up-Python-for-Neovim#using-virtual-environments
    " should default to /usr/bin/python3 if not installed
    let g:python3_host_prog = $HOME . "/.pyenv/versions/neovim3/bin/python"
endif
if filereadable($HOME . "/.pyenv/versions/neovim2/bin/python")
    let g:python_host_prog = $HOME . "/.pyenv/versions/neovim2/bin/python"
endif
let g:loaded_ruby_provider = 0      " disable ruby provider for neovim


" Plugins
" https://github.com/junegunn/vim-plug#usage
" Specify a directory for plugins. Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

Plug 'sheerun/vim-polyglot'                             " Language support
Plug 'numirias/semshi', {'do': ':UpdateRemotePlugins'}  " Better python syntax highlighting

Plug 'preservim/nerdtree'               " Interactive file finder
let NERDTreeShowHidden=1				" Show hidden files in nerd tree
" Set NERDTree aliases
command! NTT NERDTreeToggle
command! NTF NERDTreeFind
nnoremap <C-n><C-n> :NTT<Cr>
nnoremap <C-n><C-f> :NTF<Cr>
Plug 'vim-airline/vim-airline'                          " Status and buffer line
Plug 'vim-airline/vim-airline-themes'                   " Airline colors
let g:airline_theme='bubblegum'		                    " Start airline with this this theme
let g:airline_powerline_fonts=1                         " Use powerline fonts
let g:airline#extensions#tabline#enabled=1	            " Show open buffers at top
Plug 'tpope/vim-surround'                               " Text objects and motions for surroundings
Plug 'tpope/vim-repeat'                                 " ability to repeat surround operations
Plug 'jiangmiao/auto-pairs'                             " Pair up brackets as you type
Plug 'yggdroot/indentline'                              " Show indents with lines
Plug 'tpope/vim-commentary'                             " Verb for commenting lines
Plug 'airblade/vim-gitgutter'                           " Show version control changes in the gutter
Plug 'michaeljsmith/vim-indent-object'                  " Text objects for indentation
Plug 'tmhedberg/matchit'                                " Better pair matching with %
Plug 'mattn/emmet-vim'                                  " Make HTML easier to write

Plug 'junegunn/fzf', { 'do': { -> fzf#install()  }  }   " Fuzzy File Finding
Plug 'junegunn/fzf.vim'
nnoremap <C-P><C-f> :Files<Cr>
nnoremap <C-P><C-b> :Buffers<Cr>
nnoremap <C-P><C-t> :Tags<Cr>
nnoremap <C-P><C-g> :Commits<Cr>
nnoremap <C-P><C-l> :Lines<Cr>
nnoremap <C-P><C-m> :Marks<Cr>
nnoremap <C-P><C-h> :History<Cr>
nnoremap <C-P><C-s> :Snippets<Cr>
nnoremap <C-P><C-r> :Rg<Cr>

Plug 'dyng/ctrlsf.vim'                      " Grep style full text searching
" prompt search
nmap <C-F><C-f> <Plug>CtrlSFPrompt
" search for visual selection
vmap <C-F><C-f> <Plug>CtrlSFVwordExec
" search word udner cursor
nmap <C-F><C-n> <Plug>CtrlSFCwordPath
" search last buffer search
nmap <C-F><C-p> <Plug>CtrlSFPwordPath
nnoremap <C-F><C-t> :CtrlSFToggle<CR>
" focus on search window
let g:ctrlsf_auto_focus = {
    \ "at": "done",
    \ }
" Commands In CtrlSF window:
" Enter, o, double-click - Open corresponding file of current line
" <C-O> - Like Enter but open file in a horizontal split window.
" t - Open file in a new tab
" p - Open file in a preview window
" P - Open file in a preview window and switch focus to it
" O - Always leave CtrlSF window opening
" T - Open in new tab but keep focus on CtrlSF window
" M - Switch result window between normal view and compact view
" q - Quit CtrlSF window.
" <C-J> - Move cursor to next match.
" <C-K> - Move cursor to previous match.
" <C-C> - Stop a background searching process.

Plug 'vim-test/vim-test'                    " Run tests from vim
let test#strategy = "vimterminal"

Plug 'SirVer/ultisnips'                      " Snippets engine
let g:UltiSnipsExpandTrigger="<C-e>"

" LSP
" review this on neovim 0.5.0 with:
" https://github.com/neovim/nvim-lspconfig
" https://github.com/nvim-lua/completion-nvim
Plug 'prabirshrestha/async.vim'             " Standard async job API for neovim and vim8
Plug 'prabirshrestha/vim-lsp'               " LSP client
nnoremap g] :LspDefinition<CR>
nnoremap g[ :LspReferences<CR>
nnoremap <C-j> :LspHover<CR>
let g:lsp_diagnostics_enabled = 0
Plug 'mattn/vim-lsp-settings'               " Manage LSP servers for vim-lsp (e.g. installing, starting, stopping, etc)

Plug 'dense-analysis/ale'                   " Asyncronous linting engine
" Set linting tools
let g:ale_linters = {
\    'javascript': ['eslint'],
\    'python': []
"\    'python': ['flake8', 'pydocstyle']
\}
" Set fixing tools
let g:ale_fixers = {
\    'python': [ 'remove_trailing_lines', 'trim_whitespace', 'black' ],
\    'javascript': [ 'remove_trailing_lines', 'trim_whitespace', 'prettier'],
\    'scss': [ 'remove_trailing_lines', 'trim_whitespace', 'prettier'],
\    'html': [ 'remove_trailing_lines', 'trim_whitespace', 'prettier'],
\    'yaml': [ 'remove_trailing_lines', 'trim_whitespace' ],
\    'vim': [ 'remove_trailing_lines', 'trim_whitespace' ],
\}
let g:ale_fix_on_save = 1                               " Run fixers on save
let g:ale_completion_autoimport = 1                     " Attempt fix missing imports. Does this even work?
let g:ale_sign_error = '❌'                             " change error sign to something clearer
let g:ale_sign_warning = '⚠️'                            " change warning sign to something clearer
let g:ale_echo_msg_format = '[%linter%][%severity%] %s' " Make cmd bar ALE messages clearer
let g:ale_open_list = 1                                 " Open window at bottom of screen
" ALE key remaps
nnoremap <C-A><C-n> :ALENextWrap<CR>
nnoremap <C-A><C-p> :ALEPreviousWrap<CR>

Plug 'vim-scripts/AutoComplPop'         " Automatically show completion menu in insert mode
" Autocompletion engine
" require pip package 'pynvim'
if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
" TODO: disable deoplete on vim8? we never use it for this anyways
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'                " vim-based remote plugin behaviour (i.e. allow vim to make RPC calls)
  Plug 'roxma/vim-hug-neovim-rpc'       " experimental compatibility layer for neovim rpc client working on vim8
endif
let g:deoplete#enable_at_startup = 1
" inoremap <expr> <C-n> deoplete#manual_complete()
autocmd CompleteDone * pclose!                      " close the preview window after autocomplete is finished
" deoplete plugins
Plug 'lighttiger2505/deoplete-vim-lsp'              " LSP completion
" Plug 'deoplete-plugins/deoplete-jedi'             " Jedi completion

Plug 'easymotion/vim-easymotion'                    " Go to two-letter combination similar to f/F
nmap s <Plug>(easymotion-s2)
Plug 'tpope/vim-fugitive'                           " Git operations directly in vim
Plug 'tpope/vim-rhubarb'                            " Github backend for vim-fugitive
" Plug 'mg979/vim-visual-multi'                       " Sublime Text/VS Code <C-n> style multi select
Plug 'tweekmonster/django-plus.vim'                 " Better django html completions and indentation behaviour
Plug 'sedm0784/vim-you-autocorrect'                 " Fix typos automatically
" augroup ILoveCorrections
"     autocmd!
"     autocmd BufEnter * EnableAutocorrect
" augroup END
Plug 'junegunn/seoul256.vim'                 " Preferred colorscheme
Plug 'psliwka/vim-smoothie'                  " Smooth line scrolling
Plug 'honza/vim-snippets'                    " Snippet repository
Plug 'iamcco/markdown-preview.nvim',         " Show Markdown as you type
    \ { 'do': 'cd app && yarn install'  }

" Some plugins I'd like to try out:
" https://www.gregjs.com/vim/2016/neovim-deoplete-jspc-ultisnips-and-tern-a-config-for-kickass-autocompletion/
" Plug 'ryanoasis/nerd-fonts'

call plug#end()

" COLORS
" load colors after plugins if using plugin color instead of ~/.vimrc/colors
set t_Co=256						" Set 256 color mode. Your terminal must support this
command! LightMode :colorscheme seoul256 | :set background=light
command! DarkMode :colorscheme seoul256 | :set background=dark
" TODO: make color mode contingent on time. LightMode during day, DarkMode
" during night
" https://stackoverflow.com/questions/3368748/conditional-colorscheme-in-vimrc
" LightMode        " use lightmode by default
DarkMode         " use darkmode by default

" CUSTOM COMMANDS
command! SourceVimrc :source $MYVIMRC
command! NukeIt :%bdelete|:edit .
" Close all other buffers but current one
" https://stackoverflow.com/questions/4545275/vim-close-all-buffers-but-this-one
command! CloseOthers :%bd|e#

" KEY MAPPINGS
" CTRL-H go to previous buffer
nnoremap <C-L> :bnext!<CR>
" CTRL-L go to next buffer
nnoremap <C-H> :bprevious!<CR>

" Experimenting with autocmd
function CallPythonFormatters()
    " run black + isort on python files saved
    " hide all output
    :silent !black %
    :silent !isort %
    " reload the file in editor
    " save + restore the view to prevent centering on the cursor
    :let v = winsaveview()
    :edit
    :call winrestview(v)
endfunction
autocmd BufWritePost *.py call CallPythonFormatters()

" Ctrl-C in visual mode copies to clipboard
vmap <C-c> "+y

" Enter a command that produces a ton of text, this will open a new buffer and
" paste the text into that buffer so you can search/copy it/save it/etc
function s:more(command)
    new
    redir => m | silent execute a:command | silent redir END | silent put=m
    normal gg
endfunction
command! -nargs=+ -complete=command More call s:more(<q-args>)

function s:search(question)
    silent execute "!xdg-open \"https://google.ca/search?q=" . a:question "\""
endfunction
command! -nargs=+ -complete=command Search call s:search(<q-args>)
