# The interface for binary installs is slightly different
# There is no predefined provider here
# This interface is a 'last resort' designed to address
# the case where the app you're trying to get is not
# available through the other package managers
#
# Required:
# - `url` to download from, presumably with a version
# Optionally:
# - `exec_name`, which may differ from app name e.g. minioclient vs mc
---
- name: Set executable and metadata paths
  ansible.builtin.set_fact:
    executable_path: "{{ executable_directory }}/{{ app.exec_name | default(app.name) }}"
    executable_metadata: "{{ executable_directory }}/.{{ app.exec_name | default(app.name) }}.metadata"

- name: Check for metadata file
  # create metadata file if it doesnt exist
  # grab its contents for the unholy imperitive crap to follow
  ansible.builtin.shell: "test ! -f {{ executable_metadata }} && touch {{ executable_metadata }}; cat {{ executable_metadata }};"
  changed_when: false
  register: current_url_output

- name: Get contents of metadata file
  ansible.builtin.set_fact:
    current_url: "{{ current_url_output.stdout }}"

- name: Download executable
  ansible.builtin.get_url:
    url: "{{ app.url }}"
    dest: "{{ executable_path }}"
    mode: "+x"
  # download only when url has changed, otherwise we incur network traffic for no reason
  # when url does not end in .zip
  when: app.url | regex_search(".*(?<!zip)$") and current_url != app.url

- name: Download and unzip executable
  ansible.builtin.unarchive:
    url: "{{ app.url }}"
    dest: "{{ executable_directory }}"
    mode: "+x"
  # download only when url has changed, otherwise we incur network traffic for no reason
  # when url ends in .zip
  when: app.url | regex_search('.*zip$') and current_url != app.url

- name: "Write to metadata if changed:  {{ app.url }}"
  ansible.builtin.copy:
    content: "{{ app.url }}"
    dest: "{{ executable_metadata }}"
  when: current_url != app.url
