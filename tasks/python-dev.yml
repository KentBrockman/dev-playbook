# Install tools for python development
# pyenv - tool for quicky changing python versions and virtualenvs
# pyenv's shim system CAN hijack env python,python2 and python3 where the package or binaries you need may not be installed
# If ANY python environments are having problems, 95% of the time it is a matter of:
# - troubleshooting PATH resolutions
# - reverse engineering shell construction
# - reading scripts to figure out who is referencing what
# - typing the following a million times:
#   - which python
#   - pyenv which python
#   - python -c "import sys; print sys.path"
# - then being satisfied there is no right way to do this, theres only a best way, which is the way you can understand or troubleshoot in the smallest amount of time
# It is good to remember ANY PYTHON INSTALL is just a collection of files installed somewhere on your machine and linked through path-based resolution mechanics, which are often haphazard and environment based
---
- name: install pyenv
  vars:
    # pyenv/virtualenv versions to install
    # choose a tag for a release: https://github.com/pyenv/pyenv/releases
    pyenv_version: "v2.2.3"
    # choose a tag for a release: https://github.com/pyenv/pyenv-virtualenv/releases
    pyenv_virtualenv_version: "v1.1.5"
    # Python versions to install
    pyenv_python_versions:
      - "3.7.9"
      - "3.8.6"
      - "2.7.18"
    # what python environment should be used by default
    pyenv_global: system
    pyenv_install_from_package_manager: false
    pyenv_detect_existing_install: true
    # Dont modify dotfiles - will do it our own way
    pyenv_init_shell: false
  include_role:
    name: markosamuli.pyenv
  # markosamuli.pyenv requires pyenv to be available on the path, which isnt standard for non interactive login shells (ssh)
  # HACK: add ~/.zshenv with associated environment setup (add pyenv to path, call pyenv init, etc)
  # TODO: fully qualify pyenv system check, submit PR
  # HACK: enable on local host now only
  # when: ansible_connection == "local"

- name: confirm pyenv global is system
  copy:
    src: files/python-dev/pyenv_version
    dest: ~/.pyenv/version

- name: install development dependencies
  pip:
    name:
      - python-language-server
      - jedi
      - tox
    state: latest

- name: install pyenv ansible module to set up virtual environments
  tags: pyenv-environments
  import_role:
    name: suzuki-shunsuke.pyenv-module

# setup neovim Python providers in pyenv now that we have it
- name: set up virtual environments
  tags: pyenv-environments
  include_tasks: tasks/python-environment.yml
  with_items:
    # Python 2 neovim provider
    - virtualenv_name: neovim2
      version: 2.7.18
      packages:
        - neovim
        - python-language-server
        - jedi
    # Python 3 neovim provider
    - virtualenv_name: neovim3
      version: 3.7.9
      packages:
        - neovim
        - python-language-server
        - jedi
